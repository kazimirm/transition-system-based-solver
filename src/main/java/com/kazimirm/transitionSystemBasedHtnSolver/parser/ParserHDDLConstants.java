/* Generated By:JavaCC: Do not edit this line. ParserHDDLConstants.java */
package com.kazimirm.transitionSystemBasedHtnSolver.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserHDDLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAR = 5;
  /** RegularExpression Id. */
  int RPAR = 6;
  /** RegularExpression Id. */
  int LSBRA = 7;
  /** RegularExpression Id. */
  int RSBRA = 8;
  /** RegularExpression Id. */
  int LT = 9;
  /** RegularExpression Id. */
  int GT = 10;
  /** RegularExpression Id. */
  int EQ = 11;
  /** RegularExpression Id. */
  int DASH = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int QUESTIONMARK = 14;
  /** RegularExpression Id. */
  int AND = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int OR = 17;
  /** RegularExpression Id. */
  int DEFINE = 18;
  /** RegularExpression Id. */
  int DOMAIN = 19;
  /** RegularExpression Id. */
  int PROBLEM = 20;
  /** RegularExpression Id. */
  int REQUIREMENTS = 21;
  /** RegularExpression Id. */
  int TYPES = 22;
  /** RegularExpression Id. */
  int CONSTANTS = 23;
  /** RegularExpression Id. */
  int PREDICATES = 24;
  /** RegularExpression Id. */
  int PARAMETERS = 25;
  /** RegularExpression Id. */
  int OBJECTS = 26;
  /** RegularExpression Id. */
  int TASK = 27;
  /** RegularExpression Id. */
  int SUBTASKS = 28;
  /** RegularExpression Id. */
  int ORDERED_SUBTASKS = 29;
  /** RegularExpression Id. */
  int TASKS = 30;
  /** RegularExpression Id. */
  int ORDERING = 31;
  /** RegularExpression Id. */
  int CONSTRAINTS = 32;
  /** RegularExpression Id. */
  int METHOD = 33;
  /** RegularExpression Id. */
  int ACTION = 34;
  /** RegularExpression Id. */
  int PRECONDITION = 35;
  /** RegularExpression Id. */
  int EFFECT = 36;
  /** RegularExpression Id. */
  int HTN = 37;
  /** RegularExpression Id. */
  int INIT = 38;
  /** RegularExpression Id. */
  int VAR = 39;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\" \"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"-\"",
    "\":\"",
    "\"?\"",
    "\"and\"",
    "\"not\"",
    "\"or\"",
    "\"define\"",
    "\"domain\"",
    "\"problem\"",
    "\"requirements\"",
    "\"types\"",
    "\"constants\"",
    "\"predicates\"",
    "\"parameters\"",
    "\"objects\"",
    "\"task\"",
    "\"subtasks\"",
    "\"ordered-subtasks\"",
    "\"tasks\"",
    "\"ordering\"",
    "\"constraints\"",
    "\"method\"",
    "\"action\"",
    "\"precondition\"",
    "\"effect\"",
    "\"htn\"",
    "\"init\"",
    "<VAR>",
  };

}
