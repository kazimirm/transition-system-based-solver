/* ParserHDDL.java */
/* Generated By:JavaCC: Do not edit this line. ParserHDDL.java */
  package com.kazimirm.transitionSystemBasedHtnSolver.parser;

  import java.io.*;
  import java.util.*;
  import com.kazimirm.transitionSystemBasedHtnSolver.hddlObjects.*;

  public class ParserHDDL implements ParserHDDLConstants {

    public static void main(String[] args) throws ParseException,FileNotFoundException {

       if (args.length < 1) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
       }

        ParserHDDL parser = new ParserHDDL(new FileInputStream(args[0]));

        //Domain domain = parser.start();
        //HtnInput input = parser.start();
        //System.out.println("Parse completed.");
     }

////////////////////////////////////////////////////////////////////////
////////////////    ENTRY POINT      ///////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
  Domain parseDomain() throws ParseException {Domain domain = new Domain();
    domain = domain();
    jj_consume_token(0);
{if ("" != null) return domain;}
    throw new Error("Missing return statement in function");
}

  static final public Problem parseProblem() throws ParseException {Problem problem = new Problem();
    problem = problem();
    jj_consume_token(0);
{if ("" != null) return problem;}
    throw new Error("Missing return statement in function");
}

//  Domain start():
//  {
//      Domain domain = new Domain();
//      Problem problem = new Problem();
//  }
//  {
//    domain = domain()
////    | problem = problem()
//    <EOF>
//      {
//        return domain;
//      }
//  }

//  HtnInput start():
//  {
//    HtnInput input = new HtnInput();
//  }
//  {
//    input = domain() | input = problem()
//    <EOF>
//      {
//        return input;
//      }
//  }

////////////////////////////////////////////////////////////////////////
////////////////    HELP METHODS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public   String getAttribute() throws ParseException {Token attribute;
    attribute = jj_consume_token(VAR);
{if ("" != null) return attribute.toString();}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    DOMAIN      ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
  Domain domain() throws ParseException {Domain domain = new Domain();
    List<Requirement> requirements = new ArrayList<>();
    List<Type> types = new ArrayList<>();
    List<Predicate> predicates = new ArrayList<>();
    List<Task> tasks = new ArrayList<>();
    List<Method> methods = new ArrayList<>();
    List<Action> actions = new ArrayList<>();
    String domainName;
    jj_consume_token(LPAR);
    jj_consume_token(DEFINE);
    jj_consume_token(LPAR);
    jj_consume_token(DOMAIN);
    domainName = getAttribute();
    jj_consume_token(RPAR);
    if (jj_2_1(5)) {
      requirements = getRequirements();
    } else {
      ;
    }
    types = getTypes();
    predicates = getPredicates();
    tasks = getTasks();
    methods = getMethods();
    actions = getActions();
    jj_consume_token(RPAR);
domain.setName(domainName);
        domain.setRequirements(requirements);
        domain.setTypes(types);
        domain.setPredicates(predicates);
        domain.setTasks(tasks);
        domain.setMethods(methods);
        domain.setActions(actions);
        {if ("" != null) return domain;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    REQUIREMENTS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
List<Requirement> getRequirements() throws ParseException {List<Requirement> requirements = new ArrayList<>();
    Requirement requirement;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(REQUIREMENTS);
    label_1:
    while (true) {
      if (jj_2_2(5)) {
        ;
      } else {
        break label_1;
      }
      requirement = getRequirement();
requirements.add(requirement);
    }
    jj_consume_token(RPAR);
{if ("" != null) return requirements;}
    throw new Error("Missing return statement in function");
}

  static final public Requirement getRequirement() throws ParseException {Requirement requirement = new Requirement();
     String value;
    jj_consume_token(COLON);
    value = getAttribute();
requirement.setValue(value);
        {if ("" != null) return requirement;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    TYPES   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
 List<Type> getTypes() throws ParseException {List<Type> types = new ArrayList<>();
    Type type;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(TYPES);
    label_2:
    while (true) {
      if (jj_2_3(5)) {
        ;
      } else {
        break label_2;
      }
      type = getType();
types.add(type);
    }
    jj_consume_token(RPAR);
{if ("" != null) return types;}
    throw new Error("Missing return statement in function");
}

  static final public Type getType() throws ParseException {Type type = new Type();
     String name;
     String baseType;
    name = getAttribute();
    jj_consume_token(DASH);
    baseType = getAttribute();
type.setName(name);
        type.setBaseType(baseType);
        {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    PREDICATES   ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
  List<Predicate> getPredicates() throws ParseException {List<Predicate> predicates = new ArrayList<>();
     Predicate predicate;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(PREDICATES);
    label_3:
    while (true) {
      if (jj_2_4(5)) {
        ;
      } else {
        break label_3;
      }
      predicate = getPredicate();
predicates.add(predicate);
    }
    jj_consume_token(RPAR);
{if ("" != null) return predicates;}
    throw new Error("Missing return statement in function");
}

  static final public Predicate getPredicate() throws ParseException {Predicate predicate = new Predicate();
     List<Argument> arguments = new ArrayList<>();

     String name;
     String argumentName;
     String argumentType;
    jj_consume_token(LPAR);
    name = getAttribute();
    label_4:
    while (true) {
      jj_consume_token(QUESTIONMARK);
      argumentName = getAttribute();
      jj_consume_token(DASH);
      argumentType = getAttribute();
Argument argument = new Argument();
                            argument.setName(argumentName);
                            argument.setType(argumentType);
                            arguments.add(argument);
      if (jj_2_5(5)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(RPAR);
predicate.setName(name);
        predicate.setArguments(arguments);
        {if ("" != null) return predicate;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    GET PARAMETERS   ///////////////////////////////////
////////////////////////////////////////////////////////////////////////
///                 Used in task/method/action/problem body          ///
////////////////////////////////////////////////////////////////////////
  static final public 
List<Parameter> getParameters() throws ParseException {List<Parameter> parameters = new ArrayList<>();
    String paramName;
    String paramType;
    jj_consume_token(COLON);
    jj_consume_token(PARAMETERS);
    jj_consume_token(LPAR);
    label_5:
    while (true) {
      if (jj_2_6(5)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(QUESTIONMARK);
      paramName = getAttribute();
      jj_consume_token(DASH);
      paramType = getAttribute();
Parameter parameter = new Parameter();
             parameter.setName(paramName);
             parameter.setType(paramType);
             parameters.add(parameter);
    }
    jj_consume_token(RPAR);
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    TASKS   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
Task getTask() throws ParseException {Task task = new Task();
    List<Parameter> parameters = new ArrayList<>();
    String name;
    String paramName;
    String paramType;
    name = getAttribute();
    parameters = getParameters();
task.setName(name);
        task.setParameters(parameters);
        {if ("" != null) return task;}
    throw new Error("Missing return statement in function");
}

  static final public List<Task> getTasks() throws ParseException {List<Task> tasks = new ArrayList<>();
     List<Argument> arguments = new ArrayList<>();
     String name;
    label_6:
    while (true) {
      if (jj_2_7(5)) {
        ;
      } else {
        break label_6;
      }
Task task = new Task();
      jj_consume_token(LPAR);
      jj_consume_token(COLON);
      jj_consume_token(TASK);
      task = getTask();
      jj_consume_token(RPAR);
tasks.add(task);
    }
{if ("" != null) return tasks;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    METHODS   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public List<Method> getMethods() throws ParseException {List<Method> methods = new ArrayList<>();
    Method method;
    label_7:
    while (true) {
      if (jj_2_8(5)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(LPAR);
      jj_consume_token(COLON);
      jj_consume_token(METHOD);
      method = getMethod();
methods.add(method);
      jj_consume_token(RPAR);
    }
{if ("" != null) return methods;}
    throw new Error("Missing return statement in function");
}

  static final public Method getMethod() throws ParseException {Method method = new Method();
    Task task = new Task();
    List<Parameter> methodParameters = new ArrayList<>();
    List<Subtask> subtasks = new ArrayList<>();
    List<Ordering> ordering = new ArrayList<>();
    String methodName;
    String paramName;
    String paramType;
    String taskName;
    methodName = getAttribute();
    methodParameters = getParameters();
    task = getTaskSignature(methodParameters);
    if (jj_2_9(5)) {
      subtasks = getSubtaskDefinition();
    } else if (jj_2_10(5)) {
      subtasks = getSubtasksDefinition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      if (jj_2_11(5)) {
        ;
      } else {
        break label_8;
      }
      ordering = getOrdering();
    }
method.setName(methodName);
        method.setParameters(methodParameters);
        method.setTask(task);
        method.setSubtasks(subtasks);
        method.setOrdering(ordering);
        {if ("" != null) return method;}
    throw new Error("Missing return statement in function");
}

  static final public Task getTaskSignature(List<Parameter> parameters) throws ParseException {Task task = new Task();
     List<Parameter> taskParameters = new ArrayList<>();
     String taskName;
     String paramName;
    jj_consume_token(COLON);
    jj_consume_token(TASK);
    jj_consume_token(LPAR);
    taskName = getAttribute();
    label_9:
    while (true) {
      if (jj_2_12(5)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(QUESTIONMARK);
      paramName = getAttribute();
for(Parameter p : parameters) {
            if(p.getName().equals(paramName)) {
                taskParameters.add(p);
            }
        }
    }
    jj_consume_token(RPAR);
task.setName(taskName);
        task.setParameters(taskParameters);
        {if ("" != null) return task;}
    throw new Error("Missing return statement in function");
}

  static final public List<Subtask> getSubtaskDefinition() throws ParseException {List<Subtask> subtasks = new ArrayList<>();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
    jj_consume_token(COLON);
    jj_consume_token(SUBTASKS);
    jj_consume_token(LPAR);
    subtaskName = getAttribute();
    jj_consume_token(LPAR);
    taskName = getAttribute();
    label_10:
    while (true) {
      if (jj_2_13(5)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(QUESTIONMARK);
      param = getAttribute();
Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
    }
    jj_consume_token(RPAR);
Subtask subtask = new Subtask();
            Task task = new Task();
            subtask.setName(subtaskName);
            task.setName(taskName);
            task.setParameters(subtaskParameters);
            subtask.setTask(task);
            subtasks.add(subtask);
            subtaskParameters = new ArrayList<>();
    jj_consume_token(RPAR);
{if ("" != null) return subtasks;}
    throw new Error("Missing return statement in function");
}

  static final public List<Subtask> getSubtasksDefinition() throws ParseException {List<Subtask> subtasks = new ArrayList<>();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
    jj_consume_token(COLON);
    jj_consume_token(SUBTASKS);
    jj_consume_token(LPAR);
    jj_consume_token(AND);
    label_11:
    while (true) {
      if (jj_2_14(5)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(LPAR);
      subtaskName = getAttribute();
      jj_consume_token(LPAR);
      taskName = getAttribute();
      label_12:
      while (true) {
        if (jj_2_15(5)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(QUESTIONMARK);
        param = getAttribute();
Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
      }
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);
Subtask subtask = new Subtask();
            Task task = new Task();
            subtask.setName(subtaskName);
            task.setName(taskName);
            task.setParameters(subtaskParameters);
            subtask.setTask(task);
            subtasks.add(subtask);
            subtaskParameters = new ArrayList<>();
    }
    jj_consume_token(RPAR);
{if ("" != null) return subtasks;}
    throw new Error("Missing return statement in function");
}

  static final public List<Ordering> getOrdering() throws ParseException {List<Ordering> ordering = new ArrayList<>();
    String subtaskBefore;
    String subtaskAfter;
    jj_consume_token(COLON);
    jj_consume_token(ORDERING);
    jj_consume_token(LPAR);
    jj_consume_token(AND);
    label_13:
    while (true) {
      if (jj_2_16(5)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(LPAR);
      jj_consume_token(LT);
      subtaskBefore = getAttribute();
      subtaskAfter = getAttribute();
      jj_consume_token(RPAR);
Ordering o = new Ordering();
            o.setSubtaskBefore(subtaskBefore);
            o.setSubtaskAfter(subtaskAfter);
            ordering.add(o);
    }
    jj_consume_token(RPAR);
{if ("" != null) return ordering;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    Actions   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
List<Action> getActions() throws ParseException {List<Action> actions = new ArrayList<>();
    Action action = new Action();
    label_14:
    while (true) {
      if (jj_2_17(5)) {
        ;
      } else {
        break label_14;
      }
      action = getAction();
actions.add(action);
    }
{if ("" != null) return actions;}
    throw new Error("Missing return statement in function");
}

  static final public Action getAction() throws ParseException {Action action = new Action();
    List<Parameter> parameters = new ArrayList<>();
    List<Predicate> preconditions = new ArrayList<>();
    List<Predicate> effects = new ArrayList<>();
    String actionName;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(ACTION);
    actionName = getAttribute();
    parameters = getParameters();
    jj_consume_token(COLON);
    jj_consume_token(PRECONDITION);
    preconditions = getActionPredicates();
    jj_consume_token(COLON);
    jj_consume_token(EFFECT);
    effects = getActionPredicates();
    jj_consume_token(RPAR);
action.setName(actionName);
        action.setParameters(parameters);
        action.setPreconditions(preconditions);
        action.setEffects(effects);
        {if ("" != null) return action;}
    throw new Error("Missing return statement in function");
}

  static final public List<Predicate> getActionPredicates() throws ParseException {List<Predicate> predicates = new ArrayList<>();
    List<Argument> arguments = new ArrayList<>();
    String name;
    String param;
    jj_consume_token(LPAR);
    label_15:
    while (true) {
      if (jj_2_18(5)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(AND);
      label_16:
      while (true) {
        if (jj_2_19(5)) {
          ;
        } else {
          break label_16;
        }
        if (jj_2_22(5)) {
          jj_consume_token(LPAR);
          name = getAttribute();
          label_17:
          while (true) {
            if (jj_2_20(5)) {
              ;
            } else {
              break label_17;
            }
            jj_consume_token(QUESTIONMARK);
            param = getAttribute();
Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
          }
          jj_consume_token(RPAR);
Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(true);
                predicates.add(predicate);
                arguments = new ArrayList<>();
        } else if (jj_2_23(5)) {
          jj_consume_token(LPAR);
          jj_consume_token(NOT);
          jj_consume_token(LPAR);
          name = getAttribute();
          label_18:
          while (true) {
            if (jj_2_21(5)) {
              ;
            } else {
              break label_18;
            }
            jj_consume_token(QUESTIONMARK);
            param = getAttribute();
Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
          }
          jj_consume_token(RPAR);
Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(false);
                predicates.add(predicate);
                arguments = new ArrayList<>();
          jj_consume_token(RPAR);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RPAR);
{if ("" != null) return predicates;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    Problem   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
Problem problem() throws ParseException {Problem problem = new Problem();
    List<Argument> objects = new ArrayList<>();
    List<Predicate> init = new ArrayList<>();
    Htn htn;
    String problemName;
    String domainName;
    jj_consume_token(LPAR);
    jj_consume_token(DEFINE);
    jj_consume_token(LPAR);
    jj_consume_token(PROBLEM);
    problemName = getAttribute();
    jj_consume_token(RPAR);
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(DOMAIN);
    domainName = getAttribute();
    jj_consume_token(RPAR);
    objects = getObjects();
    htn = getHtn();
    init = getInit();
    jj_consume_token(RPAR);
problem.setName(problemName);
        problem.setObjects(objects);
        problem.setHtn(htn);
        problem.setInit(init);
        {if ("" != null) return problem;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    Objects   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
List<Argument> getObjects() throws ParseException {List<Argument> objects = new ArrayList<>();
    String name;
    String type;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(OBJECTS);
    label_19:
    while (true) {
      if (jj_2_24(5)) {
        ;
      } else {
        break label_19;
      }
      name = getAttribute();
      jj_consume_token(DASH);
      type = getAttribute();
Argument object = new Argument();
            object.setName(name);
            object.setType(type);
            objects.add(object);
    }
    jj_consume_token(RPAR);
{if ("" != null) return objects;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    HTN   //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
Htn getHtn() throws ParseException {Htn htn = new Htn();
    List<Parameter> parameters = new ArrayList<>();
    List<Subtask> subtasks = new ArrayList<>();
    List<Ordering> ordering = new ArrayList<>();
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(HTN);
    if (jj_2_25(5)) {
      parameters = getParameters();
    } else {
      ;
    }
    if (jj_2_26(5)) {
      subtasks = getSubtasks();
    } else if (jj_2_27(5)) {
      subtasks = getSubtask();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_28(5)) {
      ordering = getOrdering();
    } else {
      ;
    }
    jj_consume_token(RPAR);
htn.setParameters(parameters);
        htn.setSubtasks(subtasks);
        htn.setOrdering(ordering);
        {if ("" != null) return htn;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    subtasks - in HTN///////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public List<Subtask> getSubtask() throws ParseException {List<Subtask> subtasks = new ArrayList<>();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
    jj_consume_token(COLON);
    if (jj_2_29(5)) {
      jj_consume_token(SUBTASKS);
    } else if (jj_2_30(5)) {
      jj_consume_token(TASKS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAR);
    label_20:
    while (true) {
      if (jj_2_31(5)) {
        ;
      } else {
        break label_20;
      }
      subtaskName = getAttribute();
      jj_consume_token(LPAR);
      taskName = getAttribute();
      label_21:
      while (true) {
        if (jj_2_32(5)) {
          ;
        } else {
          break label_21;
        }
        param = getAttribute();
Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
      }
      jj_consume_token(RPAR);
Subtask subtask = new Subtask();
            Task task = new Task();
            subtask.setName(subtaskName);
            task.setName(taskName);
            task.setParameters(subtaskParameters);
            subtask.setTask(task);
            subtasks.add(subtask);
            subtaskParameters = new ArrayList<>();
    }
    jj_consume_token(RPAR);
{if ("" != null) return subtasks;}
    throw new Error("Missing return statement in function");
}

  static final public List<Subtask> getSubtasks() throws ParseException {List<Subtask> subtasks = new ArrayList<>();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
    jj_consume_token(COLON);
    if (jj_2_33(5)) {
      jj_consume_token(SUBTASKS);
    } else if (jj_2_34(5)) {
      jj_consume_token(TASKS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAR);
    jj_consume_token(AND);
    label_22:
    while (true) {
      if (jj_2_35(5)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(LPAR);
      subtaskName = getAttribute();
      jj_consume_token(LPAR);
      taskName = getAttribute();
      label_23:
      while (true) {
        if (jj_2_36(5)) {
          ;
        } else {
          break label_23;
        }
        param = getAttribute();
Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
      }
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);
Subtask subtask = new Subtask();
            Task task = new Task();
            subtask.setName(subtaskName);
            task.setName(taskName);
            task.setParameters(subtaskParameters);
            subtask.setTask(task);
            subtasks.add(subtask);
            subtaskParameters = new ArrayList<>();
    }
    jj_consume_token(RPAR);
{if ("" != null) return subtasks;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////
////////////////    init   /////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  static final public 
List<Predicate> getInit() throws ParseException {List<Predicate> init = new ArrayList<>();
    List<Argument> arguments = new ArrayList<>();
    Predicate predicate = new Predicate();
    Argument argument = new Argument();
    String name;
    String arg;
    jj_consume_token(LPAR);
    jj_consume_token(COLON);
    jj_consume_token(INIT);
    label_24:
    while (true) {
      if (jj_2_37(5)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(LPAR);
arguments = new ArrayList<>();
      name = getAttribute();
      label_25:
      while (true) {
        if (jj_2_38(5)) {
          ;
        } else {
          break label_25;
        }
        arg = getAttribute();
argument = new Argument();
                argument.setName(arg);
                arguments.add(argument);
      }
      jj_consume_token(RPAR);
predicate = new Predicate();
            predicate.setName(name);
            predicate.setValue(true);
            predicate.setArguments(arguments);
            init.add(predicate);
    }
    jj_consume_token(RPAR);
{if ("" != null) return init;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_3_30()
 {
    if (jj_scan_token(TASKS)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(METHOD)) return true;
    if (jj_3R_getMethod_389_9_32()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_getPredicate_271_6_29()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_getAction_553_5_36()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(ACTION)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_3R_getParameters_301_5_37()) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_scan_token(SUBTASKS)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_getRequirements_192_5_26()) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_3R_getSubtask_731_5_39()) return true;
    return false;
  }

  static private boolean jj_3R_getSubtask_731_5_39()
 {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    if (jj_scan_token(LPAR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(TASK)) return true;
    if (jj_3R_getTask_327_6_31()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_3R_getAction_553_5_36()) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_getSubtaskDefinition_438_5_33()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(SUBTASKS)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_getType_234_6_28()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_getSubtasksDefinition_477_5_34()) return true;
    return false;
  }

  static private boolean jj_3R_getAttribute_142_5_30()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_getType_234_6_28()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(DASH)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(DASH)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_getOrdering_513_5_35()) return true;
    return false;
  }

  static private boolean jj_3R_getTask_327_6_31()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_3R_getParameters_301_5_37()) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_getSubtasks_770_5_38()) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_3R_getParameters_301_5_37()) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_getOrdering_513_5_35()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(ORDERING)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_getRequirement_204_6_27()) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(TASKS)) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(SUBTASKS)) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_getOrdering_513_5_35()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_getSubtaskDefinition_438_5_33()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_getParameters_301_5_37()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(PARAMETERS)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_getRequirement_204_6_27()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(DASH)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_getMethod_389_9_32()
 {
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_3R_getParameters_301_5_37()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_getSubtasks_770_5_38()
 {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(AND)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    if (jj_scan_token(DASH)) return true;
    if (jj_3R_getAttribute_142_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_getSubtasksDefinition_477_5_34()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(SUBTASKS)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_getRequirements_192_5_26()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(REQUIREMENTS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_getPredicate_271_6_29()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserHDDLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[38];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserHDDL(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserHDDL(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserHDDLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserHDDL(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserHDDLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserHDDLTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserHDDL(ParserHDDLTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserHDDLTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[38];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 38; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 38; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

   }
