 options {
    IGNORE_CASE = false;
    OPTIMIZE_TOKEN_MANAGER = true;
    LOOKAHEAD=5;
    STATIC=false;
  }

  PARSER_BEGIN(ParserHDDL)
  package com.kazimirm.transitionSystemBasedHtnSolver.parser;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import com.kazimirm.transitionSystemBasedHtnSolver.hddlObjects.*;

public class ParserHDDL {

  public static void main(String[] args) throws ParseException,FileNotFoundException {

     if (args.length < 1) {
         System.out.println("Please pass in the filename for a parameter.");
         System.exit(1);
     }

      ParserHDDL parser = new ParserHDDL(new FileInputStream(args[0]));
   }
}



  PARSER_END(ParserHDDL)

   SKIP: /* Whitespaces */
   {
     "\t"
   | "\n"
   | "\r"
   | " "
   }

  TOKEN: /* All possible valid tokens */
  {
    <LPAR:    			    "(">										/* ( */
    | <RPAR:    			")">										/* ) */
    | <LSBRA:    			"[">										/* [ */
    | <RSBRA:    			"]">										/* ] */
    | <LT:    			    "<">										/* < */
    | <GT:    			    ">">										/* > */
    | <EQ:    			    "=">										/* = */
    | <DASH:    			"-">										/* - */
    | <COLON:    			":">										/* : */
    | <QUESTIONMARK:  	    "?">										/* ? */
    | <AND:  				"and">										/* and */
    | <NOT:  				"not">										/* not */
    | <OR:  				"or">										/* or */
    | <DEFINE:    		    "define">									/* define */
    | <DOMAIN:    		    "domain">									/* domain */
    | <PROBLEM:    		    "problem">									/* problem */
    | <REQUIREMENTS:  	    "requirements">								/* requirements */
    | <TYPES:  			    "types">									/* types */
    | <CONSTANTS:  		    "constants">								/* constants */
    | <PREDICATES:  		"predicates">								/* predicates */
    | <PARAMETERS:  		"parameters">								/* parameters */
    | <OBJECTS:  		    "objects">								    /* objects */
    | <TASK:  		        "task">								        /* tasks */
    | <SUBTASKS:  		    "subtasks">								    /* subtasks */
    | <ORDERED_SUBTASKS:  	"ordered-subtasks">							/* ordered-subtasks */
    | <TASKS:  		        "tasks">								    /* tasks */
    | <ORDERING:  		    "ordering">								    /* ordering */
    | <METHOD:  		    "method">								    /* method */
    | <ACTION:  		    "action">								    /* action */
    | <PRECONDITION:  		"precondition">								/* precondition */
    | <EFFECT:  		    "effect">								    /* effect */
    | <HTN:  		        "htn">								        /* htn */
    | <INIT:  		        "init">								        /* init */
    | <VAR:  				(["a"-"z", "A"-"Z", "0"-"9","_","-"])+>		/* variables, words, consts */
  }

////////////////////////////////////////////////////////////////////////
////////////////    ENTRY POINT      ///////////////////////////////////
////////////////////////////////////////////////////////////////////////

  Domain parseDomain():
  {
    Domain domain = new Domain();
  }
  {
    domain = domain()
    <EOF>
        {
            return domain;
        }
  }

  Problem parseProblem():
  {
    Problem problem = new Problem();
  }
  {
    problem = problem()
    <EOF>
        {
            return problem;
        }
  }

////////////////////////////////////////////////////////////////////////
////////////////    HELP METHODS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////
  String getAttribute() :
  {
    Token attribute;
  }
  {
    attribute = <VAR>
    {
      return attribute.toString();
    }
  }
////////////////////////////////////////////////////////////////////////
////////////////    DOMAIN      ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

  Domain domain():
  {
    Domain domain = new Domain();
    List<Requirement> requirements = new ArrayList<>();
    List<Type> types = new ArrayList<>();
    List<Predicate> predicates = new ArrayList<>();
    List<Task> tasks = new ArrayList<>();
    List<Method> methods = new ArrayList<>();
    List<Action> actions = new ArrayList<>();
    String domainName;
  }
  {
    <LPAR> <DEFINE> <LPAR> <DOMAIN> domainName = getAttribute() <RPAR>
    (requirements = getRequirements())?
    types = getTypes()
    predicates = getPredicates()
    tasks = getTasks()
    methods = getMethods()
    actions = getActions()
    <RPAR>
    {
        domain.setName(domainName);
        domain.setRequirements(requirements);
        domain.setTypes(types);
        domain.setPredicates(predicates);
        domain.setTasks(tasks);
        domain.setMethods(methods);
        domain.setActions(actions);
        return domain;
    }
  }
////////////////////////////////////////////////////////////////////////
////////////////    REQUIREMENTS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Requirement> getRequirements():
 {
    List<Requirement> requirements = new ArrayList<>();
    Requirement requirement;
 }
 {
    <LPAR> <COLON> <REQUIREMENTS> (requirement = getRequirement() { requirements.add(requirement);})* <RPAR>
    {
        return requirements;
    }
 }

 Requirement getRequirement():
 {
     Requirement requirement = new Requirement();
     String value;
 }
 {
     <COLON> value = getAttribute()
     {
        requirement.setValue(value);
        return requirement;
     }
 }

////////////////////////////////////////////////////////////////////////
////////////////    TYPES   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

 List<Type> getTypes():
 {
    List<Type> types = new ArrayList<>();
    List<Type> typesList = new ArrayList<>();
    Type type;
 }
 {
    <LPAR> <COLON> <TYPES> ((type = getType() { types.add(type);}) | (typesList = getTypesList() {types = Stream.concat(types.stream(), typesList.stream()).collect(Collectors.toList());}))* <RPAR>
    {
        return types;
    }
 }

 Type getType():
 {
     Type type = new Type();
     String name;
     String baseType;
 }
 {
     name = getAttribute() <DASH> baseType = getAttribute()
     {
        type.setName(name);
        type.setBaseType(baseType);
        return type;
     }
 }

  List<Type> getTypesList():
  {
      List<Type> types = new ArrayList<>();
      String name;
      String baseType;
  }
  {
      (name = getAttribute()
        {
            Type type = new Type();
            type.setName(name);
            types.add(type);
        }
      )*
      <DASH> baseType = getAttribute()
      {
        for(Type t : types) {
            t.setBaseType(baseType);
         }
         return types;
      }
  }

////////////////////////////////////////////////////////////////////////
////////////////    PREDICATES   ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////

  List<Predicate> getPredicates():
  {
     List<Predicate> predicates = new ArrayList<>();
     Predicate predicate;
  }
  {
     <LPAR> <COLON> <PREDICATES> (predicate = getPredicate()
                                    {
                                        predicates.add(predicate);
                                    }
                                  )* <RPAR>
     {
         return predicates;
     }
  }

 Predicate getPredicate():
 {
     Predicate predicate = new Predicate();
     List<Argument> arguments = new ArrayList<>();
     List<Argument> argumentsOfSameType;
     String name;
     String argumentName;
     String argumentType;
 }
 {
     <LPAR> (
                name = getAttribute()
                  ({argumentsOfSameType = new ArrayList<>();}
                   (<QUESTIONMARK> argumentName = getAttribute()
                    {
                      Argument argument = new Argument();
                      argument.setName(argumentName);
                      argumentsOfSameType.add(argument);
                    }
                    )+
                    <DASH> argumentType = getAttribute()
                    {
                        for(Argument argument : argumentsOfSameType) {
                            argument.setType(argumentType);
                        }
                        arguments = Stream.concat(arguments.stream(), argumentsOfSameType.stream()).collect(Collectors.toList());
                    }
                  )*
                ) <RPAR>
     {
        predicate.setName(name);
        predicate.setArguments(arguments);
        return predicate;
     }
 }
////////////////////////////////////////////////////////////////////////
////////////////    GET PARAMETERS   ///////////////////////////////////
////////////////////////////////////////////////////////////////////////
///                 Used in task/method/action/problem body          ///
////////////////////////////////////////////////////////////////////////

List<Parameter> getParameters():
 {
    List<Parameter> parameters = new ArrayList<>();
    List<Parameter> parametersOfSameType;
    String paramName;
    String paramType;
 }
 {
    <COLON> <PARAMETERS> <LPAR> ({parametersOfSameType = new ArrayList<>();}
                                    (<QUESTIONMARK> paramName = getAttribute()
                                        {
                                         Parameter parameter = new Parameter();
                                         parameter.setName(paramName);
                                         parametersOfSameType.add(parameter);
                                         }
                                    )+ <DASH> paramType = getAttribute()
                                    {
                                        for (Parameter p : parametersOfSameType){
                                            p.setType(paramType);
                                        }
                                        parameters = Stream.concat(parameters.stream(), parametersOfSameType.stream()).collect(Collectors.toList());
                                    }
    )* <RPAR>

    {
        return parameters;
    }
 }

////////////////////////////////////////////////////////////////////////
////////////////    TASKS   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

Task getTask():
 {
    Task task = new Task();
    List<Parameter> parameters = new ArrayList<>();
    String name;
    String paramName;
    String paramType;
 }
 {
     name = getAttribute()
        parameters = getParameters()

    {
        task.setName(name);
        task.setParameters(parameters);
        return task;
    }
 }

 List<Task> getTasks():
 {
     List<Task> tasks = new ArrayList<>();
     List<Argument> arguments = new ArrayList<>();
     String name;
 }
 {
    (
        {
            Task task = new Task();
        }
            <LPAR> <COLON> <TASK> task = getTask() <RPAR>
        {
            tasks.add(task);
        }
    )*
    {
        return tasks;
    }
 }

////////////////////////////////////////////////////////////////////////
////////////////    METHODS   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
List<Method> getMethods():
{
    List<Method> methods = new ArrayList<>();
    Method method;

}
{
    (<LPAR> <COLON> <METHOD> method = getMethod() { methods.add(method);} <RPAR>)*
    {
        return methods;
    }
}

Method getMethod():
 {
    Method method = new Method();
    Task task = new Task();
    List<Parameter> methodParameters = new ArrayList<>();
    List<Predicate> preconditions = new ArrayList<>();
    List<Subtask> subtasks = new ArrayList<>();
    List<Ordering> ordering = new ArrayList<>();
    String methodName;
    String paramName;
    String paramType;
    String taskName;
 }
 {
        methodName = getAttribute()
        methodParameters = getParameters()
        task = getTaskSignature(methodParameters)
        (<COLON> <PRECONDITION> ((preconditions =  getActionPredicate() | preconditions = getActionPredicates())) | (<LPAR> <RPAR>))?
        (subtasks = getSubtasksDefinition())?
        (ordering = getOrdering())?

    {
        method.setName(methodName);
        method.setParameters(methodParameters);
        method.setTask(task);
        method.setPreconditions(preconditions);
        method.setSubtasks(subtasks);
        method.setOrdering(ordering);
        return method;
    }
 }

Task getTaskSignature(List<Parameter> parameters):
 {
     Task task = new Task();
     List<Parameter> taskParameters = new ArrayList<>();
     String taskName;
     String paramName;
 }
 {
     <COLON> <TASK> <LPAR> taskName = getAttribute() (<QUESTIONMARK> paramName = getAttribute()
     {
        for(Parameter p : parameters) {
            if(p.getName().equals(paramName)) {
                taskParameters.add(p);
            }
        }
     })* <RPAR>

    {
        task.setName(taskName);
        task.setParameters(taskParameters);
        return task;
    }
 }

////////////////////////////////////////////////////////////////////////
////////////////    Subtasks definitions (domain)   ////////////////////
////////////////////////////////////////////////////////////////////////

Subtask getSubtaskDefinition():
{
    Subtask subtask = new Subtask();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName = "Unnamed";
    String taskName;
    String param;
}
{
    /////// With subtask name (for example: (task0 (get_to ?v ?l2)) )
    (<LPAR> subtaskName = getAttribute() <LPAR> taskName = getAttribute()
            (
                <QUESTIONMARK> param = getAttribute()
                    {
                        Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
                    }
            )*
    <RPAR> <RPAR>
    {
        Task task = new Task();
        subtask.setName(subtaskName);
        task.setName(taskName);
        task.setParameters(subtaskParameters);
        subtask.setTask(task);
        return subtask;
    }
    )
    |
    /////// Without subtask name (for example: (get_to ?v ?l2) )
    (<LPAR> taskName = getAttribute()
                (
                    <QUESTIONMARK> param = getAttribute()
                        {
                            Parameter parameter = new Parameter();
                            parameter.setName(param);
                            subtaskParameters.add(parameter);
                        }
                )*
    <RPAR>
    {
        Task task = new Task();
        subtask.setName(subtaskName);
        task.setName(taskName);
        task.setParameters(subtaskParameters);
        subtask.setTask(task);
        return subtask;
    }
    )
}

List<Subtask> getSubtasksDefinition():
{
    List<Subtask> subtasks = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
}
{
    <COLON> (<SUBTASKS> | <TASKS> | <ORDERED_SUBTASKS>)
    (
    (<LPAR> <RPAR>)
    |
    (<LPAR> <AND> ({Subtask subtask = new Subtask();} subtask = getSubtaskDefinition() {subtasks.add(subtask);})* <RPAR>)
    |
    (({Subtask subtask = new Subtask();} subtask = getSubtaskDefinition() {subtasks.add(subtask);})*)
    )
    {
        return subtasks;
    }
}

////////////////////////////////////////////////////////////////////////
////////////////    Ordering   /////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Ordering> getOrdering():
{
    List<Ordering> ordering = new ArrayList<>();
    String subtaskBefore;
    String subtaskAfter;
}
{
    <COLON> <ORDERING> <LPAR> (<AND>
    (<LPAR> <LT> subtaskBefore = getAttribute() subtaskAfter = getAttribute() <RPAR>
        {
            Ordering o = new Ordering();
            o.setSubtaskBefore(subtaskBefore);
            o.setSubtaskAfter(subtaskAfter);
            ordering.add(o);
        }
    )*)?
    <RPAR>
    {
        return ordering;
    }
}

////////////////////////////////////////////////////////////////////////
////////////////    Actions   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Action> getActions():
{
    List<Action> actions = new ArrayList<>();
    Action action = new Action();
}
{
    (action = getAction(){actions.add(action);})*
    {
        return actions;
    }
}

Action getAction():
{
    Action action = new Action();
    List<Parameter> parameters = new ArrayList<>();
    List<Predicate> preconditions = new ArrayList<>();
    List<Predicate> effects = new ArrayList<>();
    String actionName;
}
{
    <LPAR> <COLON> <ACTION>
    actionName = getAttribute()
    parameters = getParameters()
    <COLON> <PRECONDITION> preconditions = getActionPredicates()
    <COLON> <EFFECT> effects = getActionPredicates()
    <RPAR>
    {
        action.setName(actionName);
        action.setParameters(parameters);
        action.setPreconditions(preconditions);
        action.setEffects(effects);
        return action;
    }
}

List<Predicate> getActionPredicates():
{
    List<Predicate> predicates = new ArrayList<>();
    List<Argument> arguments = new ArrayList<>();
    String name;
    String param;

}
{
    <LPAR>
    (
        <AND>
        (
            //////////////////////////////////////////
            ////////////// TRUE //////////////////////
            //////////////////////////////////////////
            (
            <LPAR> name = getAttribute()
            (
                <QUESTIONMARK> param = getAttribute()
                {
                   Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
                }
            )*
            <RPAR>
            {
                Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(true);
                predicates.add(predicate);
                arguments = new ArrayList<>();
            }
            )

            |
            //////////////////////////////////////////
            ////////////// FALSE /////////////////////
            //////////////////////////////////////////
            (
            <LPAR> <NOT> <LPAR>name = getAttribute()
            (
                <QUESTIONMARK> param = getAttribute()
                {
                   Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
                }
            )*
            <RPAR>
            {
                Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(false);
                predicates.add(predicate);
                arguments = new ArrayList<>();
            }
            <RPAR>
            )
        )*
    )*
    <RPAR>
    {
        return predicates;
    }
}

List<Predicate> getActionPredicate():
{
    List<Predicate> predicates = new ArrayList<>();
    List<Argument> arguments = new ArrayList<>();
    String name;
    String param;

}
{

            //////////////////////////////////////////
            ////////////// TRUE //////////////////////
            //////////////////////////////////////////
            (
            <LPAR> name = getAttribute()
            (
                <QUESTIONMARK> param = getAttribute()
                {
                   Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
                }
            )*
            <RPAR>
            {
                Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(true);
                predicates.add(predicate);
                return predicates;
            }
            )
           |
            //////////////////////////////////////////
            ////////////// FALSE /////////////////////
            //////////////////////////////////////////
            (
            <LPAR> <NOT> <LPAR> name = getAttribute()
            (
                <QUESTIONMARK> param = getAttribute()
                {
                   Argument argument = new Argument();
                   argument.setName(param);
                   arguments.add(argument);
                }
            )*
            <RPAR> <RPAR>
            {
                Predicate predicate = new Predicate();
                predicate.setName(name);
                predicate.setArguments(arguments);
                predicate.setValue(false);
                predicates.add(predicate);
                return predicates;
            }
        )
}

////////////////////////////////////////////////////////////////////////
////////////////    Problem   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

Problem problem():
  {
    Problem problem = new Problem();
    List<Argument> objects = new ArrayList<>();
    List<Predicate> init = new ArrayList<>();
    List<Ordering> ordering = new ArrayList<>();
    Htn htn;
    String problemName;
    String domainName;
  }
  {
    <LPAR> <DEFINE> <LPAR> <PROBLEM> problemName = getAttribute() <RPAR>
    <LPAR> <COLON> <DOMAIN> domainName = getAttribute() <RPAR>
    objects = getObjects()
    htn = getHtn()
    init = getInit()
    (ordering = getOrdering())?
    <RPAR>
    {
        problem.setName(problemName);
        problem.setObjects(objects);
        problem.setHtn(htn);
        problem.setInit(init);
        problem.setOrdering(ordering);
        return problem;
    }
  }

////////////////////////////////////////////////////////////////////////
////////////////    Objects   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Argument> getObjects():
{
    List<Argument> objects = new ArrayList<>();
    List<Argument> objectsOfSameType = new ArrayList<>();
    String name;
    String type;
}
{
    <LPAR> <COLON> <OBJECTS>
    ({objectsOfSameType = new ArrayList<>();}
    (name = getAttribute()
        {
            Argument object = new Argument();
            object.setName(name);
            objectsOfSameType.add(object);
        }
    )*
    <DASH> type = getAttribute()
    {
        for (Argument obj : objectsOfSameType){
             obj.setType(type);
        }
        objects = Stream.concat(objects.stream(), objectsOfSameType.stream()).collect(Collectors.toList());
    }
    )*
    <RPAR>
    {
        return objects;
    }
}

////////////////////////////////////////////////////////////////////////
////////////////    HTN   //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

Htn getHtn():
{
    Htn htn = new Htn();
    List<Parameter> parameters = new ArrayList<>();
    List<Subtask> subtasks = new ArrayList<>();
    List<Ordering> ordering = new ArrayList<>();
}
{
    <LPAR> <COLON> <HTN>
    (parameters = getParameters())?
    subtasks = getProblemSubtasks()
    (ordering = getOrdering())?
    <RPAR>
    {
        htn.setParameters(parameters);
        htn.setSubtasks(subtasks);
        htn.setOrdering(ordering);
        return htn;
    }

}

////////////////////////////////////////////////////////////////////////
////////////////    subtasks - in HTN     //////////////////////////////
////////////////////////////////////////////////////////////////////////
Subtask getProblemSubtask():
{
    Subtask subtask = new Subtask();
    List<Parameter> subtaskParameters = new ArrayList<>();
    String subtaskName = "Unnamed";
    String taskName;
    String param;
}
{
    /////// With subtask name (for example: (task0 (get_to v l2)) )
    (<LPAR> subtaskName = getAttribute() <LPAR> taskName = getAttribute()
            (
                param = getAttribute()
                    {
                        Parameter parameter = new Parameter();
                        parameter.setName(param);
                        subtaskParameters.add(parameter);
                    }
            )*
    <RPAR> <RPAR>
    {
        Task task = new Task();
        subtask.setName(subtaskName);
        task.setName(taskName);
        task.setParameters(subtaskParameters);
        subtask.setTask(task);
        return subtask;
    }
    )
    |
    /////// Without subtask name (for example: (get_to v l2) )
    (<LPAR> taskName = getAttribute()
                (
                    param = getAttribute()
                        {
                            Parameter parameter = new Parameter();
                            parameter.setName(param);
                            subtaskParameters.add(parameter);
                        }
                )*
    <RPAR>
    {
        Task task = new Task();
        subtask.setName(subtaskName);
        task.setName(taskName);
        task.setParameters(subtaskParameters);
        subtask.setTask(task);
        return subtask;
    }
    )
}

List<Subtask> getProblemSubtasks():
{
    List<Subtask> subtasks = new ArrayList<>();
    String subtaskName;
    String taskName;
    String param;
}
{
    <COLON> (<SUBTASKS> | <TASKS> | <ORDERED_SUBTASKS>)
    (
    (<LPAR> <RPAR>)
    |
    (<LPAR> <AND> ({Subtask subtask = new Subtask();} subtask = getProblemSubtask() {subtasks.add(subtask);})* <RPAR>)
    |
    (({Subtask subtask = new Subtask();} subtask = getProblemSubtask() {subtasks.add(subtask);})*)
    )
    {
        return subtasks;
    }
}


////////////////////////////////////////////////////////////////////////
////////////////    init   /////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Predicate> getInit():
{
    List<Predicate> init = new ArrayList<>();
    List<Argument> arguments = new ArrayList<>();
    Predicate predicate = new Predicate();
    Argument argument = new Argument();
    String name;
    String arg;
}
{

    <LPAR> <COLON> <INIT>
    (
        <LPAR>
        {
            arguments = new ArrayList<>();
        }
        name = getAttribute()
        (
            arg = getAttribute()
            {
                argument = new Argument();
                argument.setName(arg);
                arguments.add(argument);
            }
        )*
        <RPAR>
        {
            predicate = new Predicate();
            predicate.setName(name);
            predicate.setValue(true);
            predicate.setArguments(arguments);
            init.add(predicate);
        }
    )*
    <RPAR>
    {
        return init;
    }
}